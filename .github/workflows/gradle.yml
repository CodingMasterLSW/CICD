# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

# 워크플로우의 이름을 정의합니다.
name: Java CI/CD with Gradle

# 이 워크플로우가 언제 실행될지를 정의합니다.
on:
  # main 브랜치에 대한 push 이벤트가 발생할 때 워크플로우를 실행합니다.
  push:
    branches: [ main ]
  # main 브랜치에 대한 pull request 이벤트가 발생할 때 워크플로우를 실행합니다.
  pull_request:
    branches: [ main ]
   
permissions:
  contents: read

jobs:
  build:
# 우분투 최신버전 사용
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

   # gradle wrapper 파일에 실행 권한을 부여
    # gradle wrapper = 개발자가 특정 버전의 Gradle을 미리 설치하지 않고도 Gradle 빌드를 실행할 수 있게 해주는 편리한 도구        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      shell: bash
    

 # Gradle을 사용하여 프로젝트의 테스트를 실행합니다.
    - name: Test with Gradle
      run: ./gradlew test

    # Gradle을 사용하여 프로젝트를 빌드합니다. 이 과정에서 실행 가능한 JAR 파일이 생성됩니다.
    - name: Build with Gradle
      run: ./gradlew build
